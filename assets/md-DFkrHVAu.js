import{_ as i}from"./slidev/VClicks-CKIi_om-.js";import{b as p,o as u,w as n,g as e,e as d,B as a,v as m,x as c,C as s}from"./modules/vue-DvQrzj4P.js";import{I as _}from"./slidev/default-BSFADaNG.js";import{u as g,f}from"./slidev/context-D_JH7zyj.js";import"./index-5FwGW4AT.js";import"./modules/shiki-CWH2-EAk.js";const C={__name:"graph-databases.md__slidev_25",setup(h){const{$clicksContext:l,$frontmatter:r}=g();return l.setup(),(y,t)=>{const o=i;return u(),p(_,m(c(s(f)(s(r),24))),{default:n(()=>[t[1]||(t[1]=e("h1",null,"Graph Databases",-1)),d(o,null,{default:n(()=>t[0]||(t[0]=[e("ul",null,[e("li",null,[e("p",null,"This paradigm represents data and/or the schema as graphs.")]),e("li",null,[e("p",null,"Many implementations support flexible schemas, with some offering data integrity features (e.g., constraints, identity, referential integrity)")]),e("li",null,[e("p",null,[e("strong",null,"Graph Data Model"),a(":")]),e("ul",null,[e("li",null,[e("strong",null,"Nodes"),a(": Represent entities, with metadata as key-value pairs and labels indicating roles (e.g., instance type).")]),e("li",null,[e("strong",null,"Edges"),a(": Represent relationships, including direction, start/end nodes, a label for relationship type, and optional property value assertions.")])])]),e("li",null,[e("p",null,"Many graph database implementations support hosting with flexible schemas to support heterogeneity and velocity.")])],-1)])),_:1,__:[0]})]),_:1,__:[1]},16)}}};export{C as default};
